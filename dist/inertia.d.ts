import type { Data, MaybePromise, PageProps, ResolvedConfig } from "./types.js";
import { AlwaysProp, DeferProp, MergeProp, OptionalProp } from "./props.js";
import type { Request, Response } from "express";
import type { ViteDevServer } from "vite";
export declare class Inertia {
    protected req: Request;
    protected res: Response;
    protected config: ResolvedConfig;
    protected vite?: ViteDevServer | undefined;
    private sharedData;
    private serverRenderer;
    private shouldClearHistory;
    private shouldEncryptHistory;
    constructor(req: Request, res: Response, config: ResolvedConfig, vite?: ViteDevServer | undefined);
    private isPartial;
    private resolveOnly;
    private resolveExcept;
    private pickPropsToResolve;
    private resolveProp;
    resolvePageProps(props?: PageProps): Promise<any>;
    private resolveDeferredProps;
    private resolveMergeProps;
    private buildPageObject;
    private resolveRootView;
    private getTemplate;
    private renderOnServer;
    private renderOnClient;
    private encodePageProps;
    share(data: Record<string, Data>): void;
    render<TPageProps extends Record<string, any> = {}>(component: string, pageProps?: TPageProps): Promise<any>;
    clearHistory(): void;
    encryptHistory(encrypt?: boolean): void;
    lazy<T>(callback: () => MaybePromise<T>): OptionalProp<() => MaybePromise<T>>;
    optional<T>(callback: () => MaybePromise<T>): OptionalProp<() => MaybePromise<T>>;
    merge<T>(callback: () => MaybePromise<T>): MergeProp<() => MaybePromise<T>>;
    always<T>(callback: () => MaybePromise<T>): AlwaysProp<() => MaybePromise<T>>;
    defer<T>(callback: () => MaybePromise<T>, group?: string): DeferProp<() => MaybePromise<T>>;
    location(url: string): Promise<void>;
}
